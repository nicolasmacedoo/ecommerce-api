generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  roleId        String   @map("role_id")
  name          String
  email         String   @unique
  password      String
  emailVerified Boolean  @default(false) @map("email_verified")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  role     Role      @relation(fields: [roleId], references: [id])
  customer Customer?

  @@map("users")
}

model Customer {
  id        String   @id @default(uuid())
  userId    String   @unique @map("user_id")
  fullName  String   @map("full_name")
  contact   String
  address   String
  status    Boolean
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  @@map("customers")
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  users       User[]
  permissions Permission[] @relation("RolePermissions")

  @@map("roles")
}

model Permission {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  roles Role[] @relation("RolePermissions")

  @@map("permissions")
}

model Product {
  id            String   @id @default(uuid())
  name          String
  description   String
  price         Decimal  @db.Decimal(10, 2)
  stockQuantity Int      @map("stock_quantity")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  orderItems OrderItem[]

  @@map("products")
}

enum OrderStatus {
  RECEIVED
  IN_PREPARATION
  DISPATCHED
  DELIVERED
  CANCELLED
  COMPLETED
}

model Order {
  id          String      @id @default(uuid())
  customerId  String      @map("customer_id")
  status      OrderStatus
  totalAmount Decimal     @map("total_amount") @db.Decimal(10, 2)
  date        DateTime    @default(now())

  customer   Customer    @relation(fields: [customerId], references: [id])
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  productId String  @map("product_id")
  orderId   String  @map("order_id")
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  subtotal  Decimal @db.Decimal(10, 2)

  product Product @relation(fields: [productId], references: [id])
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@id([productId, orderId])
  @@map("order_items")
}

model SalesReport {
  id                String   @id @default(uuid())
  startDate         DateTime @map("start_date")
  endDate           DateTime @map("end_date")
  totalSales        Decimal  @map("total_sales") @db.Decimal(15, 2)
  totalProductsSold Int      @map("total_products_sold")
  path              String   @map("path")
  createdAt         DateTime @default(now()) @map("created_at")

  @@map("sales_reports")
}
